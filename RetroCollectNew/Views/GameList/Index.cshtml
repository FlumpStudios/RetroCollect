@model ApplicationLayer.Models.Responses.GameListResponse


@using X.PagedList;

@{
    ViewData["Title"] = "Index";
}

<h2>Index</h2>

<p>

    @Html.HiddenFor(x => x.CurrentOrderBy)
    @Html.HiddenFor(x => x.LastPage)


    @if (Model.IsLoggedIn)
    {
        <a asp-action="Create">Create New</a>
    }

    <!--Searching and filtering controls-->  

    @using (Html.BeginForm("Index", "GameList", FormMethod.Get, new { id = "game-form" }))
    {
        @Html.TextBox("searchText")
        @if (Model.IsLoggedIn)
        { 
            @Html.CheckBox("showClientList", false)
        }
        <button type="submit">Search</button>


        @foreach (var items in Model.ConsoleList)
        {
            <button class="console-selection" id="@items" value="@items">@items</button>        
            @Html.Hidden("switchsort", false);
            @Html.HiddenFor(x => x.Page);
            @Html.HiddenFor(x => x.SortingOptions);
            @Html.HiddenFor(x => x.Format);

        }
    }

</p>
<table class="table">
    
    <thead>
        <tr>
@foreach (var columnName in Model.ColumnNames)
{ 
                <th id="@columnName" class="sorting-headers">
                    @columnName <i class="fa fa-sort-down"></i>
                </th>}   
            <th></th>

        </tr>
    </thead>
    <tbody>
@foreach (var item in Model.GameListModel)
{
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Name)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Developer)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Genre)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Publisher)
            </td>
            <td>
               @if (Model.IsLoggedIn)
               {
                 <text>     
                    <i id="@item.Id" class="fa fa-plus add-new-game"></i>
                 </text>    
                }
                
            </td>

            <td>

             <a asp-action="Details" asp-route-id="@item.Id">Details</a> 

             @if (Model.IsLoggedIn)
             {
                <text>
                |
                    <a asp-action="Edit" asp-route-id="@item.Id">Edit</a> |
                    <a asp-action="Delete" asp-route-id="@item.Id">Delete</a>
                </text>
            }

            </td>
        </tr>
}
    </tbody>
</table>
<!-- output a paging control that lets the user navigation to the previous page, next page, etc -->
<div class="pagination">
    @X.PagedList.Mvc.Core.HtmlHelper.PagedListPager(Html, (IPagedList)Model.GameListModel, page => Url.Action("Index", new { Page = Model.Page }))
</div>

<script>

</script>